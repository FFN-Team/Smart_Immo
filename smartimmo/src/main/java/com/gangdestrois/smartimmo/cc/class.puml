@startuml
'https://plantuml.com/class-diagram

interface Activity {
getId() : Integer
getCost() : Integer
getParticipants() : Participant []
accept(activityVisitor : ActivityVisitor)
}
abstract class ActivityImplementation {
- id : Integer
+ getId() : Integer
}
class Task {
- cost : Integer
+ getCost() : Integer
+ getParticipants() : Participant []
+ accept(activityVisitor : ActivityVisitor)
}
abstract class ActivityComposite {
+ getParticipants() : Participant []
}
class Sequence {
+ getCost() : Integer
+ addChildren(children : Activity [])
+ removeChildren(children : Activity [])
+ accept(activityVisitor : ActivityVisitor)
}
class Concurrency {
+ getCost() : Integer
+ addChildren(children : Activity [])
+ removeChildren(children : Activity [])
+ accept(activityVisitor : ActivityVisitor)
}
interface Composite<T> {
addChildren(children : T [])
removeChildren(children : T [])
}
class Participant
interface ActivityVisitor {
visit(task : Task)
visit(sequence : Sequence)
visit(concurrency : Concurrency)
}
class PrintUMLVisitor {
+ visit(task : Task)
+ visit(sequence : Sequence)
+ visit(concurrency : Concurrency)
}
class ActivityCostVisitor{
- bound : Integer
+ this(bound : Integer)
+ visit(task : Task)
+ visit(sequence : Sequence)
+ visit(concurrency : Concurrency)
+ setBound(bound : integer)
}
class TaskParticipantVisitor {
+ visit(task : Task)
+ visit(sequence : Sequence)
+ visit(concurrency : Concurrency)
}

Activity <|.. ActivityImplementation
ActivityImplementation <|-- ActivityComposite
ActivityImplementation <|-- Task
ActivityComposite <|-- Sequence
ActivityComposite <|-- Concurrency
Activity "*" <--o ActivityComposite : "- activities"
Participant "*" <--o Task : "- participants"
Composite <|.. ActivityComposite
ActivityVisitor <|.. PrintUMLVisitor
ActivityVisitor <|.. ActivityCostVisitor
ActivityVisitor <|.. TaskParticipantVisitor

@enduml